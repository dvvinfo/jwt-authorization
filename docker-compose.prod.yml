version: '3.8'

services:
  # База данных
  postgres:
    image: postgres:15-alpine
    container_name: jwt-auth-postgres-prod
    environment:
      POSTGRES_DB: jwt_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Бэкенд
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jwt-auth-backend-prod
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_DATABASE=jwt_auth
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PORT=3000
      - NODE_ENV=production
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # Фронтенд
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jwt-auth-frontend-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Nginx (опционально, для проксирования)
  nginx:
    image: nginx:alpine
    container_name: jwt-auth-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 